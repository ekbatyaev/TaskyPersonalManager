import logging
import asyncio
from aiogram import Bot, Dispatcher
from aiogram.filters.command import Command
from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup
from aiogram import Router, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.utils.chat_action import ChatActionSender
from aiogram.fsm.storage.memory import MemoryStorage
from tokens_file import telegram_bot_token

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_router = Router()

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
logging.basicConfig(level=logging.INFO)

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token=telegram_bot_token)
# –î–∏—Å–ø–µ—Ç—á–µ—Ä
dp = Dispatcher(storage=MemoryStorage())

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞
dp.include_router(user_router)

#–ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–∏—Ö –¥–∞–Ω–Ω—ã—Ö

# –ö–ª–∞—Å—Å—ã States

class MainStates(StatesGroup):
    start_state = State()
    problem_types = State()

class TaskCreation(StatesGroup):
    get_title = State()
    title_retrival = State()
    get_description = State()
    description_retrival = State()
    get_deadline = State()
    deadline_retrival = State()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã

#–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –º–µ–Ω—é

def get_started():
    keyboard_list = [
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É", callback_data='–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_list)
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω—ã—Ö –æ–ø—Ü–∏–π

def get_user_option():
    keyboard_list = [
        [InlineKeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É', callback_data='create_task')],
        [InlineKeyboardButton(text='–ù–∞–π—Ç–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É', callback_data='find_task')],
        [InlineKeyboardButton(text='–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ–∫—É—â–∏—Ö –∑–∞–¥–∞—á', callback_data='get_task_list')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_list)
    return keyboard

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –±–ª–æ–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏

def back_to_main_option():
    keyboard_list = [
        [InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥', callback_data='back_to_main')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_list)
    return keyboard

def task_options():
    keyboard_list = [
        [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å', callback_data='alter')],
        [InlineKeyboardButton(text='–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å', callback_data='continue')]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_list)
    return keyboard

# –ö–æ–º–∞–Ω–¥—ã

#–ö–æ–º–∞–Ω–¥–∞ /start

@user_router.message(Command("start"))
async def start_process(message: Message, state: FSMContext):
    await state.clear()
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        await asyncio.sleep(0.5)
        first_message = await message.answer(f"*–ü—Ä–∏–≤–µ—Ç, –≤—ã—à–∫–∏–Ω–µ—Ü!*" + "\n\n" +
                                             f"–ú–µ–Ω—è –∑–æ–≤—É—Ç *Tasky* ü§ñ –∏ —è —É–º–µ—é: \nüìå—Å–æ—Å—Ç–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∏\nüìå—Å—Ç–∞–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω—ã\nüìå–¥–µ–ª–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è",
                                             reply_markup=get_started(), parse_mode="Markdown")
        await state.update_data(last_message_id=first_message.message_id)
        await state.update_data(message_edit = first_message)
    await state.set_state(MainStates.start_state)

# States


@user_router.callback_query(F.data == '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É', MainStates.start_state)
async def task_choice_process(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    message_edit = data.get("message_edit")
    await asyncio.sleep(0.5)
    task_question = await message_edit.edit_text(f"–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –∑–∞–¥–∞—á—É: ",
                                                    reply_markup = get_user_option(), parse_mode = "Markdown")
    await state.update_data(last_message_id=task_question.message_id)
    await state.set_state(MainStates.problem_types)

# –ë–ª–æ–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏

@user_router.callback_query(F.data == 'create_task', MainStates.problem_types)
async def creating_new_task(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await bot.delete_message(chat_id = call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    create_task_message = await call.message.answer(f"–£—Ä–∞, —É –Ω–∞—Å –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", reply_markup=back_to_main_option(), parse_mode="Markdown")
    await state.update_data(last_message_id=create_task_message.message_id)
    await state.set_state(TaskCreation.get_title)

@user_router.callback_query(F.data == 'back_to_main', TaskCreation.get_title)
async def back_to_main_options(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await bot.delete_message(chat_id=call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    task_question = await call.message.answer(f"–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –∑–∞–¥–∞—á—É: ",
                                                 reply_markup=get_user_option(), parse_mode="Markdown")
    await state.update_data(last_message_id=task_question.message_id)
    await state.set_state(MainStates.problem_types)


@user_router.message(F.text, TaskCreation.get_title)
async def get_title(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        task_name_confirmation = await message.answer("C–ø–∞—Å–∏–±–æ!\n" + f"*–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–π –∑–∞–¥–∞—á–∏: *" + "\n\n" + message.text, reply_markup = task_options(),
                                       parse_mode="Markdown")
        await state.update_data(task_name = message.text)
        await state.update_data(last_message_id=task_name_confirmation.message_id)
        await state.set_state(TaskCreation.title_retrival)

@user_router.callback_query(F.data == 'alter', TaskCreation.title_retrival)
async def altering_task_name(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await bot.delete_message(chat_id=call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    task_name_question = await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏", parse_mode="Markdown")
    await state.update_data(last_message_id=task_name_question.message_id)
    await state.set_state(TaskCreation.get_title)

@user_router.callback_query(F.data == 'continue', TaskCreation.title_retrival)
async def get_task_description(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await bot.delete_message(chat_id=call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    description_quesiton = await call.message.answer(f"–ü—Ä–∏—à–ª–æ –≤—Ä–µ–º—è —Å–∞–º–æ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ üî• - *–æ–ø–∏—Å–∞–Ω–∏—è*.\n–ù–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏", parse_mode="Markdown")
    await state.update_data(last_message_id=description_quesiton.message_id)
    await state.set_state(TaskCreation.get_description)

@user_router.message(F.text, TaskCreation.get_description)
async def get_description(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        task_description_confirmation = await message.answer("–û—Ç–ª–∏—á–Ω–æ üëç\n" + f"*–û–ø–∏—Å–∞–Ω–∏–µ —Ç–≤–æ–µ–π –∑–∞–¥–∞—á–∏: *" + "\n\n" + message.text, reply_markup = task_options(),
                                       parse_mode="Markdown")
        await state.update_data(task_description = message.text)
        await state.update_data(last_message_id = task_description_confirmation.message_id)
        await state.set_state(TaskCreation.description_retrival)

@user_router.callback_query(F.data == 'alter', TaskCreation.description_retrival)
async def altering_task_name(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await bot.delete_message(chat_id=call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    task_description_question = await call.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–π –∑–∞–¥–∞—á–∏", parse_mode="Markdown")
    await state.update_data(last_message_id=task_description_question.message_id)
    await state.set_state(TaskCreation.get_description)

@user_router.callback_query(F.data == 'continue', TaskCreation.description_retrival)
async def get_task_description(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    last_message_id = data.get("last_message_id")
    if last_message_id:
        await bot.delete_message(chat_id=call.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await asyncio.sleep(0.5)
    description_quesiton = await call.message.answer(f"–û—Å—Ç–∞–ª–æ—Å—å —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ - *–¥–µ–¥–ª–∞–π–Ω* ‚è∞\n–ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: *12:45-17.05*", parse_mode="Markdown")
    await state.update_data(last_message_id=description_quesiton.message_id)
    await state.set_state(TaskCreation.get_description)

@user_router.message(F.text, TaskCreation.get_deadline)
async def get_deadline(message: Message, state: FSMContext):
    async with ChatActionSender.typing(bot=bot, chat_id=message.chat.id):
        data = await state.get_data()
        last_message_id = data.get("last_message_id")
        if last_message_id:
            await bot.delete_message(chat_id=message.from_user.id, message_id=last_message_id)  # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        common_task_message = await message.answer(
            f"–¢–≤–æ–π –∑–∞–¥–∞—á–∞ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:\n\n" + f"*–ù–∞–∑–≤–∞–Ω–∏–µ: *" + data.get("task_name") + "\n" + f"*–û–ø–∏—Å–∞–Ω–∏–µ: *" + data.get("task_description") +
            "\n" + f"*–î–µ–¥–ª–∞–π–Ω: *" + message.text, parse_mode="Markdown")
        await state.update_data( task_deadline = message.text)
        await state.update_data(last_message_id = common_task_message.message_id)
        await state.set_state(TaskCreation.deadline_retrival)

# –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–ª–ª–∏–Ω–≥–∞ –Ω–æ–≤—ã—Ö –∞–ø–¥–µ–π—Ç–æ–≤
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())